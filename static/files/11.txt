#include <bits/stdc++.h>
using namespace std;

void bfs(queue<int>q,bool vis[],vector<int>adj[]){
    while(!q.empty()){
        int x=q.front();
        q.pop();
        cout<<x<<" ";
        vis[x]=1;
        for(int i=0;i<adj[x].size();i++){
            if(!vis[adj[x][i]]){
                q.push(adj[x][i]);
                vis[adj[x][i]]=1;
            }
        }
    }
}
signed main(){
	
    int n;
    cout<<"Enter the no of nodes"<<endl;
    cin>>n;
    int m;
    cout<<"Enter the no of edges"<<endl;
    cin>>m;
    vector<int>adj[n+1]; //Stores the adjacency list  of graph
    bool vis[n+1]={0}; //Stores whether the current node is visited or not
    for(int x=0;x<m;x++){
        int u,v;
        cout<<"Enter the nodes which form the current edge"<<endl;
        cin>>u>>v; 
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    queue<int>q;
    int w;
    cout<<"Enter the node from where you want the bfs operation to begin"<<endl;
    cin>>w;
    q.push(w);
    vis[w]=1;
    bfs(q,vis,adj);
    for(int x=1;x<=n;x++){
        if(!vis[x]){
            bfs(q,vis,adj);
        }
    }
	








	
return 0;
}

